import { z } from 'zod';
import type { Conversation } from './types';


// Schemas for server actions & flows
export const SenderInputSchema = z.object({
  userId: z.string().describe('The user ID in Firestore.'),
  phone: z.string().describe('The recipient\'s phone number.'),
  message: z.string().describe('The message content to send.'),
  source: z.enum(['ai', 'operator', 'system']).optional().describe('The source of the message.'),
  operatorEmail: z.string().optional().describe('The email of the operator sending the message.'),
});

export const SenderOutputSchema = z.object({
  success: z.boolean(),
  messageId: z.string().optional(),
  error: z.string().optional(),
});


export const TranscribeAudioInputSchema = z.object({
  userId: z.string(),
  conversationId: z.string(),
  messageId: z.string(),
  audioData: z.string().describe("O conteúdo do áudio em Base64, incluindo o mime type. Ex: 'data:audio/ogg;base64,...'"),
});

export const TranscribeAudioOutputSchema = z.object({
  transcription: z.string().nullable().describe('The transcribed text from the audio.'),
});

export const ProcessConversationInputSchema = z.object({
  userId: z.string(),
  conversation: z.custom<Conversation>()
});

// --- Agent Prompt Generation Schemas ---
export const GenerateAgentPromptInputSchema = z.object({
  userId: z.string().describe('The ID of the user for whom the prompt is being generated.'),
  mode: z.enum(['simple', 'advanced']).describe('The configuration mode used.'),
  companyName: z.string().optional().describe('The name of the business.'),
  businessDescription: z.string().describe('A description of what the business does.'),
  agentRole: z.string().describe('The main function or role of the AI agent.'),
  agentPersonality: z.string().optional().describe("The agent's personality (e.g., 'Amigável', 'Profissional')."),
  useEmojis: z.boolean().optional().describe('Whether the agent should use emojis.'),
  useGreeting: z.boolean().optional().describe('Whether the agent should use a standard greeting.'),
  contactPhone: z.string().optional().describe('The business contact phone number.'),
  contactEmail: z.string().optional().describe('The business contact email address.'),
  agentObjective: z.string().optional().describe('The main goal the agent should try to achieve in a conversation.'),
  targetAudience: z.string().optional().describe('Description of the ideal customer.'),
  keyProducts: z.string().optional().describe('Products or services to highlight.'),
  commonMistakes: z.string().optional().describe('What the agent must not do.'),
  humanizationTriggers: z.string().optional().describe('Situations that require immediate human intervention.'),
  fixedLinks: z.string().optional().describe('Important links to provide to customers.'),
  unknownAnswerResponse: z.string().optional().describe('The default response when the AI does not know the answer.'),
  qualifyingQuestions: z.array(z.string()).optional().describe('The questions the AI should ask to qualify a lead.'),
  routingSectors: z.array(z.string()).optional().describe('The sectors/tags for the routing agent.'),
  surveyQuestions: z.string().optional().describe('The questions the AI should ask to conduct a survey.'),
  notifyOnTagAdded: z.boolean().optional().describe('Whether to send a push notification when the routing agent adds a tag.'),
});

export const GenerateAgentPromptOutputSchema = z.object({
  success: z.boolean(),
  prompt: z.string().optional().describe('The full, structured system prompt generated by the AI.'),
  feedback: z.string().optional().describe('AI-generated feedback on the quality and safety of the prompt.'),
  error: z.string().optional(),
});


// --- Field Suggestion Generation Schemas ---
export const GenerateFieldSuggestionInputSchema = z.object({
  userId: z.string(),
  businessDescription: z.string(),
  agentRole: z.string(),
  fieldName: z.enum(['commonMistakes', 'humanizationTriggers']),
});

export const GenerateFieldSuggestionOutputSchema = z.object({
  success: z.boolean(),
  suggestion: z.string().optional(),
  error: z.string().optional(),
});

// --- AI Tool Schemas ---
export const CancelAppointmentSchema = z.object({
    eventId: z.string().describe("O ID do evento do Google Calendar que deve ser cancelado."),
});

export const EndConversationSchema = z.object({
    reason: z.string().optional().describe("Um resumo do motivo pelo qual a conversa está sendo encerrada, se aplicável.")
});

export const GetAvailableSlotsSchema = z.object({
    startDate: z.string().describe("A data de início do período de busca de disponibilidade, no formato DD/MM/AAAA."),
    endDate: z.string().describe("A data de fim do período de busca de disponibilidade, no formato DD/MM/AAAA. Pode ser a mesma que a data de início se a busca for para um único dia."),
});

export const ListEventsSchema = z.object({
    startDate: z.string().describe("A data de início para a busca, no formato DD/MM/AAAA."),
    endDate: z.string().describe("A data de fim para a busca, no formato DD/MM/AAAA."),
});

export const RequestHumanSupportSchema = z.object({
    reason: z.string().describe("O motivo pelo qual a transferência para um humano foi necessária. Ex: 'Cliente solicitou falar com um atendente.'"),
});

export const ScheduleAppointmentSchema = z.object({
    serviceName: z.string().describe("O nome do serviço ou motivo do agendamento, que será o título do evento. Ex: 'Corte de cabelo', 'Consulta de rotina'."),
    appointmentDate: z.string().describe("A data do agendamento, no formato DD/MM/AAAA. Ex: '25/12/2024'."),
    appointmentTime: z.string().describe("A hora do agendamento, no formato HH:mm. Ex: '15:30'."),
    clientFullName: z.string().optional().describe("O nome completo do cliente para registrar no agendamento. Se a IA não tiver certeza ou não souber, pode omitir este campo."),
    description: z.string().optional().describe("Uma breve descrição ou resumo do agendamento para adicionar aos detalhes do evento no Google Calendar. Ex: 'Cliente interessado no pacote X, tem dúvidas sobre Y.'"),
    response_after_tool: z.string().optional().describe("A mensagem de confirmação que deve ser enviada para o cliente APENAS se o agendamento for bem-sucedido. Esta mensagem será enviada pelo sistema. Ex: 'Perfeito! Seu horário está confirmado.'"),
});

export const SendMediaMessageSchema = z.object({
    mediaUrls: z.array(z.string().url()).describe('Uma lista com uma ou mais URLs públicas da mídia a ser enviada.'),
    mediatype: z.enum(['image', 'video', 'audio', 'document']).describe('O tipo de mídia.'),
    caption: z.string().optional().describe('A legenda ou texto que acompanha a mídia (enviado com a primeira imagem).'),
    mimetype: z.string().optional().describe('O tipo MIME do arquivo, importante para áudios e documentos (ex: audio/ogg, application/pdf).'),
    fileName: z.string().optional().describe('O nome do arquivo a ser exibido para o cliente, útil para documentos.'),
    response_after_tool: z.string().optional().describe("Uma mensagem de texto para enviar ao cliente APÓS o envio da mídia ser bem-sucedido. Use para continuar a conversa. Ex: 'Aqui está o catálogo que você pediu. Qual item mais te interessou?'"),
});

export const SummarizeConversationSchema = z.object({});

export const UpdateClientInfoSchema = z.object({
    preferredName: z.string().optional().describe("O nome que o cliente informou para ser chamado."),
    addressText: z.string().optional().describe("O endereço completo informado pelo cliente em texto corrido (ex: 'Rua das Flores, 123, Bairro Jardim, apto 101, perto da padaria')."),
    notes: z.string().optional().describe("Uma anotação importante sobre o cliente que deve ser salva para referência futura. Use para preferências, lembretes ou informações que não se encaixam em outros campos."),
});

export const UpdateConversationTagsSchema = z.object({
    tags: z.array(z.string()).describe("Uma lista de etiquetas (tags) a serem adicionadas à conversa. Ex: ['Orçamento', 'Botox', 'Agendamento']."),
});

// Ferramentas que, em caso de sucesso, devem ter sua resposta de texto omitida.
export const silentTools = [
    'getAvailableSlotsTool',
    'listEventsTool',
    'summarizeConversationTool',
    'updateClientInfoTool',
    'updateConversationTagsTool',
    'scheduleAppointmentTool',
    'sendMediaMessageTool',
];
